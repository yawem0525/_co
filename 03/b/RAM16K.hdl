// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
 DMux8Way(in=load, sel=address[7..9], a=loadA, b=loadB, c=loadC, d=loadD, e=loadE, f=loadF, g=loadG, h=loadH);

    RAM64(a=in, load=loadA, address=address[0..6], out=outA);
    RAM64(b=in, load=loadB, address=address[0..6], out=outB);
    RAM64(c=in, load=loadC, address=address[0..6], out=outC);
    RAM64(d=in, load=loadD, address=address[0..6], out=outD);
    RAM64(e=in, load=loadE, address=address[0..6], out=outE);
    RAM64(f=in, load=loadF, address=address[0..6], out=outF);
    RAM64(g=in, load=loadG, address=address[0..6], out=outG);
    RAM64(h=in, load=loadH, address=address[0..6], out=outH);

    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, sel=address[7..9], out=out);
}
